------------------------ step-1 : exec into kafka client pod ---------------------------------
kubectl exec -it <kafka-cient-pod> -- bash
cd bin

------------------------ step-2 : create a topic ---------------------------------------------
./kafka-topics.sh --zookeeper zookeeper-service:2181 --topic messages --create --partitions 3 --replication-factor 1

------------------------ step-2 : describe a topic ---------------------------------------------
./kafka-topics.sh --zookeeper zookeeper-service:2181 --topic messages --describe

------------------------ step-3 : test if topic got created ----------------------------------
./kafka-topics.sh --zookeeper zookeeper-service:2181 --list

------------------------ step-4 : kafka consumer to read message on topic -------------------
./kafka-console-consumer.sh --bootstrap-server kafka-service:9092 --topic messages --from-beginning

------------------------ step-5 : kafka producer --------------------------------------------
./kafka-console-producer.sh --broker-list kafka-service:9092 --topic messages
./kafka-console-producer.sh --broker-list kafka-service:9092 --topic messages --producer-property acks=all

## producer which sends message to non-existent topic (this will give warning)
## kafka will create that topic with default config i.e. partition-count 1 and replication-factor of 1
## so always create a topic before using it

## to change default partitions value, modify value of nun.partition in server.properties

------------------------ step-6 : kafka consumer group --------------------------------------------
## --group do not work in new kafka API
./kafka-console-consumer.sh --bootstrap-server kafka-service:9092 --topic messages --consumer-property group.id=my-app-1

## show kafka consumer group --list do not work in new kafka API
./kafka-consumer-groups.sh --bootstrap-server kafka-service:9092 --list

## describe a consumer group
./kafka-consumer-groups.sh --bootstrap-server kafka-service:9092 --describe --group my-app-1

## reset kafka consumer group offset to the first message on group
./kafka-consumer-groups.sh --bootstrap-server kafka-service:9092 --group my-app-1 \
    --reset-offsets --to-earliest --execute --topic messages

## reset kafka consumer group offset to the latest message on group
./kafka-consumer-groups.sh --bootstrap-server learning_kafka_1:9092 --group my-app-1 \
    --reset-offsets --to-latest --execute --topic messages